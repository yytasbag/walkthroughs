## Introduction
Hello once again! This is my second walkthrough. This time it is about reversing. I have picked the second challenge, IgniteMe, from the 2017 Flare-On.
This challenge is supposed to be easy since it was after a challenge which gave the flag after a ROT13 but since I am very inexperienced with the subject of reverse engineering it took me quite a while to solve it
(probably 3-5 hours). Before I begin I would like to talk about a few things. There was a security conference at my university which inspired me to pursue to write for this blog. I have a plan in mind about what to write
here. I think I will start with a series for ROP Emporium challenges then I may write about the problems that I have encountered in CTFs.
Enough with the talking let's begin with the challenge. But keep in mind that  	__**I am no where near experienced with RE.**__ This is not a detailed tutorial. Please contact me if there are any errors. Any feedback is appreciated.
Contact: @yamantasbagv2
You can find the challenges at: https://www.fireeye.com/blog/threat-research/2017/08/fourth-annual-flare-on-challenge.html
##First look
When you extract the zip file It comes with a folder for each challenge. In the folder 02 there is a file called IgniteMe.exe. Let's run file on it.
```
IgniteMe.exe: PE32 executable (console) Intel 80386, for MS Windows
```
As blog post about the challenge says it is a 32 bit windows executable.
Let's run it.
```
Î» .\IgniteMe.exe
G1v3 m3 t3h fl4g:  test
N0t t00 h0t R we? 7ry 4ga1nz plzzz!
```
Seems simple enough. Now let's load it with IDA and look around.

## Static Analysis
After we load it in IDA we have the following structure.
[PIC01]

Before the jump there isn't much besides the following three instructions:
```
call    sub_4010F0
call    sub_401050
test    eax, eax
jz      short loc_401218
```
test eax,eax is just checking if eax is 0. Since in x86 eax is used for the return values of functions, I think it is a fair assumption that sub_401050 is where the checking for the flag happens.
But we don't know what happens in sub_4010F0 so let's start with it.
[PIC02-1]
[PIC02-2]

var_8 seems like a loop iterator so I named it iter. When we follow the execution the program sets each element of the buffer to 0.
After that we see that it reads input from the stdin and copies it to a local var called Buffer. Then it calls a function named sub_401020 with the argument buffer_ptr.
Let's see what happens in sub_401020.
[PIC03]
Here var_4 looks like a loop operator so once again I renamed it iter. This simple function calculates the size of the buffer and returns it. We can see this from the middle box since it adds iter to the buffer_ptr and loads the byte
to ecx then checks ecx is 0 or not. If it is than is sets eax to ecx and returns. Therefore I have named this function getSize. I think it would be the following C code.
```
int getSize(char* buffer)
{
  int iter = 0;
  while(buffer[iter])
    iter = iter +1;
  return iter;
}
```
When we get back to sub_4010F0 if we follow the path we see that we start with setting iter to 0 (this is before the getSize call). We see that it checks the value at buffer[iter] is either \n or \r if not it copies it to the array at 0x403078.
It is logical to assume location 0x403078 is the permanent location of the user input and will be used by the next function since it is located in .bss; hence I renamed it to input.
Since this function setups the user input I renamed it to getInput.

Now that we are done with this function let's get back to the sub_401050.
[PIC04-1]
[PIC04-2]
Let's rename the obvious variables first. We can see that var_C is the size of the input. then we see a call to sub_401000 then we set var_1 to least significant 2 bytes of eax. I will ignore var_1 for the moment.
var_8 is once again the iter. But this time it from the reverse. It goes from len(input) - 1 to 0. There is 2 parts of this function the part on the left somehow xors our input and writes it to 0x403180 hence I renamed it to xored_input.
The other part compares our xored_input to some constant at 0x403000 and returns 0 if they are equal. We can say that 0x403000 is the encrypted_flag.
At this point I copied the encrypted_flag to a file in hex.
> '\x0D\x26\x49\x45\x2A\x17\x78\x44\x2B\x6C\x5D\x5E\x45\x12\x2F\x17\x2B\x44\x6F\x6E\x56\x09\x5F\x45\x47\x73\x26\x0A\x0D\x13\x17\x48\x42\x01\x40\x4D\x0C\x02\x69'
Let's closely examine the xor part.
[PIC-05]
The encryption is like this we load current char to eax, var_1 to ecx. Then we xor ecx and eax and put it to xored_input[iter]. Finally we set var_1 to input[iter]. It is obvious that var_1 is the xor_key.
We are almost done. If we can find the initial value of xor_key which is output of sub_401000 we can get the flag.

Let's look at sub_401000.
[PIC-06]
Since sub_401000 does not depend on anything and does not have a side effect I named it as getKey.
This looks like a simple function but like I said I am very inexperienced with RE. And I know that if I tried to calculate this by hand I know I will make a mistake.
## Dynamic Analysis (Kind of)
I downloaded x64db and loaded IgniteMe.exe. I have set a breakpoint just before the return and noted value of eax. eax = 0x00700004, which makes al = 0x4. Now that we know the initial key value we can calculate the flag.
I do have to admit though this was probably the lamest usage of a debugger.
## Getting The Flag
I have written the following python script to get the flag.
```
f = '\x0D\x26\x49\x45\x2A\x17\x78\x44\x2B\x6C\x5D\x5E\x45\x12\x2F\x17\x2B\x44\x6F\x6E\x56\x09\x5F\x45\x47\x73\x26\x0A\x0D\x13\x17\x48\x42\x01\x40\x4D\x0C\x02\x69'
last = 4
out = ''
for i in range(len(f)):
    j = len(f) - 1 - i
    out = chr( ord(f[j]) ^ last )  + out
    last =  ord(f[j]) ^ last
print out
```
This gave me the flag as R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com.

## Conclusion
I had a lot of fun with this challenge and learned so much. I would recommend everybody to check out the challenges in the Flare-On.
I know that the explanation was not great but I tried my best. I would recommend writing a walkthrough for the challenges that you have solved especially if you are not very experienced with the subject.
I learned as much as solving the challenge, while writing this. Thank you for reading. Any feedback is appreciated.  
